[{"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\api\\index.ts":"1","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\App.tsx":"2","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\i18n.tsx":"3","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\pages\\Files.tsx":"4","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\components\\Navigation.tsx":"5","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\types.ts":"6","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\index.tsx":"7","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\index.ts":"8","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\i18n\\zh-CN.ts":"9","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\rootSetting.tsx":"10","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\i18n\\index.ts":"11","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\i18n\\en-US.ts":"12"},{"size":1963,"mtime":1611904612567,"results":"13","hashOfConfig":"14"},{"size":764,"mtime":1611819064015,"results":"15","hashOfConfig":"14"},{"size":2600,"mtime":1611912559478,"results":"16","hashOfConfig":"14"},{"size":6850,"mtime":1611914667498,"results":"17","hashOfConfig":"14"},{"size":1261,"mtime":1611912284160,"results":"18","hashOfConfig":"14"},{"size":842,"mtime":1611815075832,"results":"19","hashOfConfig":"14"},{"size":1151,"mtime":1611823365153,"results":"20","hashOfConfig":"14"},{"size":208,"mtime":1611815098087,"results":"21","hashOfConfig":"14"},{"size":179,"mtime":1611912766913,"results":"22","hashOfConfig":"14"},{"size":1086,"mtime":1611823341822,"results":"23","hashOfConfig":"14"},{"size":209,"mtime":1611802587852,"results":"24","hashOfConfig":"14"},{"size":190,"mtime":1611913276572,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10w9nnf",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\api\\index.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\App.tsx",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\i18n.tsx",["53"],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\pages\\Files.tsx",["54","55","56"],"import * as React from 'react';\r\nimport { useState, useEffect } from 'react'\r\nimport { useRouter } from '../hooks'\r\nimport * as FileIcons from '../img/filetypes';\r\nimport { Popover, IBreadcrumbProps, Card, Elevation, Breadcrumbs, Boundary, Spinner, Intent, Alert, Button, Menu, MenuItem, MenuDivider } from \"@blueprintjs/core\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { getFileDownloadUrl, getFiles, getFileViewUrl } from '../api'\r\nimport { FileInfo, FileType } from '../types'\r\nimport { useI18n } from '../hooks'\r\ninterface FileParms {\r\n    baseId: string,\r\n    id: string\r\n}\r\ninterface FileTableProps {\r\n    loading: boolean,\r\n    children: Array<FileInfo>\r\n}\r\ninterface FileSizeProps {\r\n    size: number\r\n}\r\n\r\nfunction FileOperations({ file }: { file: FileInfo }) {\r\n    const { message } = useI18n();\r\n    if (file.type == FileType.Directory) {\r\n        return (\r\n            null\r\n        )\r\n    } else {\r\n        const menu = (\r\n            <Menu>               \r\n                <MenuItem icon=\"info-sign\" text={`${message['filesize']}: ${getFileSize(file)}`}  />\r\n                <MenuItem icon=\"download\" text={message[\"download\"]} onClick={(e: React.MouseEvent<HTMLElement>) => { window.open(getFileDownloadUrl(file), '_blank'); }} />\r\n            </Menu>\r\n        )\r\n        return (\r\n            <Popover content={menu} placement=\"right-end\">\r\n                <Button icon=\"more\" />\r\n            </Popover>\r\n        )\r\n    }\r\n}\r\n\r\nfunction FilesTable(props: FileTableProps) {\r\n    const router = useRouter();\r\n    function fileItemClicked(e: React.MouseEvent<HTMLElement>, item: FileInfo) {\r\n        if (item.type === FileType.Directory) {\r\n            router.push(`/files/${item.baseId}/${item.id}`);\r\n        } else {\r\n            window.open(getFileViewUrl(item), '_blank')\r\n        }\r\n    }\r\n    if (props.loading) {\r\n        return <Spinner intent={Intent.NONE} size={Spinner.SIZE_STANDARD} />\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                {props.children.map((file: FileInfo) =>\r\n                    <Card interactive={true} elevation={Elevation.ONE} key={file.id}>\r\n                        <div className=\"grid fileline\" onClick={(e: React.MouseEvent<HTMLElement>) => fileItemClicked(e, file)}>\r\n                            <div className=\"grid-cell u3\">\r\n                                {renderFileImage(file.ext, file.type === FileType.Directory, file.name)}\r\n                            </div>\r\n                            <div className=\"grid-cell u17\" style={{justifyContent:\"left\"}}>\r\n                                <span className=\"filename\">{file.name}</span>\r\n                            </div>\r\n                            <div className=\"grid-cell u4\" onClick={(e) => { e.stopPropagation(); }}>\r\n                                <FileOperations file={file} />\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n\r\n                )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nfunction getFileSize({ size }: FileSizeProps):string {\r\n    if (size > 0) {\r\n        const sizeName = [\"b\", \"KB\", \"MB\", \"GB\", \"TB\"];\r\n        let num = 0;\r\n        while (size > 1024 && num < 5) {\r\n            size = size / 1024;\r\n            num++;\r\n        }\r\n        if (num < 1) {\r\n            num = 1;\r\n            size = 1;\r\n        }\r\n        return Math.round(size * 10) / 10 + \" \" + sizeName[num];\r\n    } else {\r\n        return '';\r\n    }\r\n}\r\nfunction renderFileImage(type: string, isDirectory: boolean, name: string) {\r\n    let icon = FileIcons.file;\r\n    if (isDirectory) {\r\n        icon = FileIcons.folder;\r\n    } else {\r\n        if (type === 'mp4') {\r\n            icon = FileIcons.mp4;\r\n        } else if (type === 'avi') {\r\n            icon = FileIcons.avi;\r\n        } else if (type === 'exe') {\r\n            icon = FileIcons.exe;\r\n        } else if (type === 'png' || type === 'jpg' || type === 'svg') {\r\n            icon = FileIcons.jpg;\r\n        } else if (type === 'html' || type === 'htm') {\r\n            icon = FileIcons.html\r\n        } else if (type === 'pdf') {\r\n            icon = FileIcons.pdf\r\n        } else if (type === 'doc' || type === 'docx') {\r\n            icon = FileIcons.doc\r\n        } else if (type === 'ppt' || type === 'pptx') {\r\n            icon = FileIcons.ppt\r\n        } else if (type === 'xls' || type === 'xlsx') {\r\n            icon = FileIcons.xls\r\n        } else if (type === 'mp3') {\r\n            icon = FileIcons.mp3\r\n        } else if (type === 'json') {\r\n            icon = FileIcons.json\r\n        } else if (type === 'txt') {\r\n            icon = FileIcons.txt\r\n        } else if (type === 'zip' || type === 'gz' || type === 'rar' || type === 'tar') {\r\n            icon = FileIcons.zip\r\n        }\r\n    }\r\n    return <img src={icon} className=\"fileicon\" alt={name} />\r\n}\r\n\r\nexport default function Files() {\r\n    const parm = useParams<FileParms>();\r\n    const [error, setError] = useState({ error: false, errorMessage: '' })\r\n    const [breadItems, setBreadItems] = useState<Array<IBreadcrumbProps>>([])\r\n    const [data, setData] = useState<FileTableProps>({\r\n        loading: false,\r\n        children: []\r\n    })\r\n    const { message } = useI18n();\r\n    async function fetchFiles() {\r\n        try {\r\n            let res = await getFiles(parm.baseId, parm.id);\r\n            setData({\r\n                loading: false,\r\n                children: res.children\r\n            })\r\n            setError({\r\n                error: false,\r\n                errorMessage: ''\r\n            })\r\n            setBreadItems([{ icon: \"folder-open\", text: res.cwd.name, current: true }])\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n            console.log(typeof err)\r\n            setError({\r\n                error: true,\r\n                errorMessage: err\r\n            })\r\n            setData({\r\n                loading: false,\r\n                children: []\r\n            })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setData((d) => {\r\n            return {\r\n                loading: false,\r\n                children: d.children\r\n            }\r\n        });\r\n        fetchFiles();\r\n    }, [parm.baseId, parm.id])\r\n    console.log(message)\r\n    return (\r\n        <React.Fragment>\r\n            <Alert\r\n                confirmButtonText={message[\"ok\"]}\r\n                isOpen={error.error}\r\n                onClose={() => setError({ error: false, errorMessage: '' })}\r\n            >\r\n                <p>\r\n                    {error.errorMessage}\r\n                </p>\r\n            </Alert>\r\n            <Card elevation={0} style={{ width: `100%` }}>\r\n                <Breadcrumbs\r\n                    collapseFrom={Boundary.START}\r\n                    items={breadItems}\r\n                />\r\n            </Card>\r\n            <FilesTable {...data} />\r\n        </React.Fragment>\r\n    );\r\n}","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\components\\Navigation.tsx",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\types.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\index.tsx",[],["57","58"],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\index.ts",[],["59","60"],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\i18n\\zh-CN.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\rootSetting.tsx",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\i18n\\index.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\i18n\\en-US.ts",[],{"ruleId":"61","severity":1,"message":"62","line":28,"column":5,"nodeType":"63","endLine":28,"endColumn":14,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":5,"column":125,"nodeType":"63","messageId":"67","endLine":5,"endColumn":136},{"ruleId":"68","severity":1,"message":"69","line":24,"column":19,"nodeType":"70","messageId":"71","endLine":24,"endColumn":21},{"ruleId":"61","severity":1,"message":"72","line":173,"column":8,"nodeType":"73","endLine":173,"endColumn":30,"suggestions":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"75","replacedBy":"79"},{"ruleId":"77","replacedBy":"80"},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLocales'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [lang, locales, setLang, i18n] as a second argument to the useEffect Hook.","Identifier",["81"],"@typescript-eslint/no-unused-vars","'MenuDivider' is defined but never used.","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'fetchFiles'. Either include it or remove the dependency array.","ArrayExpression",["82"],"no-native-reassign",["83"],"no-negated-in-lhs",["84"],["83"],["84"],{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},"no-global-assign","no-unsafe-negation","Add dependencies array: [lang, locales, setLang, i18n]",{"range":"89","text":"90"},"Update the dependencies array to be: [fetchFiles, parm.baseId, parm.id]",{"range":"91","text":"92"},[1884,1884],", [lang, locales, setLang, i18n]",[6154,6176],"[fetchFiles, parm.baseId, parm.id]"]