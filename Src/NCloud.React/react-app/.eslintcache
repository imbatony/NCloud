[{"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\index.tsx":"1","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\pages\\Preview.tsx":"2","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\components\\Navigation.tsx":"3","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\serviceWorkerRegistration.ts":"4","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\api\\index.ts":"5","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\App.tsx":"6","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\pages\\Files.tsx":"7","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\img\\filetypes\\index.ts":"8"},{"size":911,"mtime":1611657693486,"results":"9","hashOfConfig":"10"},{"size":1735,"mtime":1611544335430,"results":"11","hashOfConfig":"10"},{"size":492,"mtime":1611544550472,"results":"12","hashOfConfig":"10"},{"size":5256,"mtime":1611295053101,"results":"13","hashOfConfig":"10"},{"size":1983,"mtime":1611657381607,"results":"14","hashOfConfig":"10"},{"size":725,"mtime":1611640946583,"results":"15","hashOfConfig":"10"},{"size":5756,"mtime":1611657784190,"results":"16","hashOfConfig":"10"},{"size":637,"mtime":1611644088975,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10w9nnf",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\index.tsx",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\pages\\Preview.tsx",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\components\\Navigation.tsx",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\serviceWorkerRegistration.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\api\\index.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\App.tsx",["35"],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\pages\\Files.tsx",["36","37"],"import * as React from 'react';\r\nimport {useState,useEffect}  from 'react'\r\nimport { useRouter } from '../hooks'\r\nimport * as FileIcons from '../img/filetypes';\r\nimport { IBreadcrumbProps,Card, Elevation, Breadcrumbs, Boundary, Spinner, Intent, Alert } from \"@blueprintjs/core\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { getFiles, FileInfo, FileType } from '../api'\r\ninterface FileParms {\r\n    baseId: string,\r\n    id: string\r\n}\r\n\r\ninterface FileTableProps {\r\n    loading: boolean,\r\n    children: Array<FileInfo>\r\n}\r\ninterface FileSizeProps {\r\n    size: number\r\n}\r\nfunction FilesTable(props: FileTableProps) {\r\n    const router = useRouter();\r\n    function fileItemClicked(item: FileInfo) {\r\n        if (item.type === FileType.Directory) {\r\n            router.push(`/files/${item.baseId}/${item.id}`);\r\n        } else {\r\n\r\n        }\r\n    }\r\n    if (props.loading) {\r\n        return <Spinner intent={Intent.NONE} size={Spinner.SIZE_STANDARD} />\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                {props.children.map((file: FileInfo) =>\r\n                    <Card interactive={true} elevation={Elevation.TWO} key={file.id}>\r\n                        <div className=\"grid\" onClick={() => fileItemClicked(file)}>\r\n                            <div className=\"grid-cell u3\">\r\n                                {renderFileImage(file.ext, file.type === FileType.Directory)}\r\n                            </div>\r\n                            <div className=\"grid-cell u17\">\r\n                                <span className=\"filename\">{file.name}</span>\r\n                            </div>\r\n                            <div className=\"grid-cell u4\">\r\n                                <FileSize size={file.size} />\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nfunction FileSize({ size }: FileSizeProps) {\r\n    if (size > 0) {\r\n        const sizeName = [\"b\", \"KB\", \"MB\", \"GB\", \"TB\"];\r\n        let num = 0;\r\n        while (size > 1024 && num < 5) {\r\n            size = size / 1024;\r\n            num++;\r\n        }\r\n        if (num < 1) {\r\n            num = 1;\r\n            size = 1;\r\n        }\r\n        return <span className=\"filesize\">{Math.round(size * 100) / 100 + \" \" + sizeName[num]}</span>;\r\n    } else {\r\n        return <span className=\"filesize\"></span>;\r\n    }\r\n}\r\nfunction renderFileImage(type: string, isDirectory: boolean) {\r\n    let icon = FileIcons.file;\r\n    if (isDirectory) {\r\n        icon = FileIcons.folder;\r\n    } else {\r\n        if (type === 'mp4') {\r\n            icon = FileIcons.mp4;\r\n        } else if (type === 'avi') {\r\n            icon = FileIcons.avi;\r\n        } else if (type === 'exe') {\r\n            icon = FileIcons.exe;\r\n        } else if (type === 'png' || type === 'jpg' || type === 'svg') {\r\n            icon = FileIcons.jpg;\r\n        } else if (type === 'html' || type === 'htm') {\r\n            icon = FileIcons.html\r\n        } else if (type === 'pdf') {\r\n            icon = FileIcons.pdf\r\n        } else if (type === 'doc' || type === 'docx') {\r\n            icon = FileIcons.doc\r\n        } else if (type === 'ppt' || type === 'pptx') {\r\n            icon = FileIcons.ppt\r\n        } else if (type === 'xls' || type === 'xlsx') {\r\n            icon = FileIcons.xls\r\n        } else if (type === 'mp3') {\r\n            icon = FileIcons.mp3\r\n        } else if (type === 'json') {\r\n            icon = FileIcons.json\r\n        } else if (type === 'txt') {\r\n            icon = FileIcons.txt\r\n        } else if (type === 'zip' || type === 'gz' || type === 'rar' || type === 'tar') {\r\n            icon = FileIcons.zip\r\n        }\r\n    }\r\n    return <img src={icon} className=\"fileicon\" />\r\n}\r\n\r\nexport default function Files() {\r\n    const parm = useParams<FileParms>();\r\n    const [error, setError] = useState({ error: false, errorMessage: '' })\r\n    const [breadItems, setBreadItems] = useState<Array<IBreadcrumbProps>>([])\r\n    const [data, setData] = useState<FileTableProps>({\r\n        loading: false,\r\n        children: []\r\n    })\r\n    async function fetchFiles() {\r\n        try{\r\n            let res = await getFiles(parm.baseId, parm.id);\r\n            setData({\r\n                loading: false,\r\n                children: res.children\r\n            })\r\n            setError({\r\n                error: false,\r\n                errorMessage: ''\r\n            })\r\n            setBreadItems([{ icon: \"folder-open\", text: res.cwd.name, current: true }])\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n                console.log(typeof err)\r\n                setError({\r\n                    error: true,\r\n                    errorMessage: err\r\n                })\r\n                setData({\r\n                    loading: false,\r\n                    children: []\r\n                })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setData((d) => {\r\n            return {\r\n                loading: false,\r\n                children: d.children\r\n            }\r\n        });\r\n        fetchFiles();      \r\n    }, [parm.baseId, parm.id])\r\n    return (\r\n        <React.Fragment>\r\n            <Alert\r\n                confirmButtonText=\"好的\"\r\n                isOpen={error.error}\r\n                onClose={() => setError({ error: false, errorMessage: '' })}\r\n            >\r\n                <p>\r\n                    {error.errorMessage}\r\n                </p>\r\n            </Alert>\r\n            <Card elevation={0} style={{ width: `100%` }}>\r\n                <Breadcrumbs\r\n                    collapseFrom={Boundary.START}\r\n                    items={breadItems}\r\n                />\r\n            </Card>\r\n            <FilesTable {...data} />\r\n        </React.Fragment>\r\n    );\r\n}","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\img\\filetypes\\index.ts",[],{"ruleId":"38","severity":1,"message":"39","line":9,"column":3,"nodeType":"40","messageId":"41","endLine":9,"endColumn":7},{"ruleId":"42","severity":1,"message":"43","line":103,"column":12,"nodeType":"44","endLine":103,"endColumn":51},{"ruleId":"45","severity":1,"message":"46","line":148,"column":8,"nodeType":"47","endLine":148,"endColumn":30,"suggestions":"48"},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchFiles'. Either include it or remove the dependency array.","ArrayExpression",["49"],{"desc":"50","fix":"51"},"Update the dependencies array to be: [fetchFiles, parm.baseId, parm.id]",{"range":"52","text":"53"},[5093,5115],"[fetchFiles, parm.baseId, parm.id]"]