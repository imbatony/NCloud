[{"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\api\\index.ts":"1","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\App.tsx":"2","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\i18n.tsx":"3","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\pages\\Files.tsx":"4","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\components\\Navigation.tsx":"5","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\types.ts":"6","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\index.tsx":"7","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\index.ts":"8","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\i18n\\zh-CN.ts":"9","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\rootSetting.tsx":"10"},{"size":1707,"mtime":1611809211232,"results":"11","hashOfConfig":"12"},{"size":764,"mtime":1611819064015,"results":"13","hashOfConfig":"12"},{"size":2598,"mtime":1611809060031,"results":"14","hashOfConfig":"12"},{"size":5881,"mtime":1611809128806,"results":"15","hashOfConfig":"12"},{"size":1070,"mtime":1611819567569,"results":"16","hashOfConfig":"12"},{"size":949,"mtime":1611814866238,"results":"17","hashOfConfig":"12"},{"size":1525,"mtime":1611817761360,"results":"18","hashOfConfig":"12"},{"size":208,"mtime":1611815098087,"results":"19","hashOfConfig":"12"},{"size":44,"mtime":1611802612236,"results":"20","hashOfConfig":"12"},{"size":1096,"mtime":1611818441450,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10w9nnf",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\api\\index.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\App.tsx",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\i18n.tsx",["45"],"import React, { createContext, useEffect, useContext } from 'react';\r\nimport { useLocalStorage } from './useLocalstorage'\r\nimport { StringDictionary, defaultLocal } from '../types'\r\nexport interface Locales {\r\n    date: number,\r\n    lang: string,\r\n    data: StringDictionary\r\n}\r\nexport interface TransProvider {\r\n    i18n: Map<string, StringDictionary>,\r\n    children: JSX.Element\r\n}\r\ninterface ContextType {\r\n    getMessages: () => StringDictionary,\r\n    lang: string,\r\n    setNewLang: (s: string) => void,\r\n    locales?: Locales\r\n}\r\nlet defaultContextType: ContextType = { getMessages: () => { return {} }, setNewLang: (l: string) => { }, lang: defaultLocal };\r\nconst Context = createContext<ContextType>(defaultContextType);\r\nexport const TransProvider = ({ i18n, children }: TransProvider) => {\r\n    if (!i18n) {\r\n        throw new Error('No i18n provide.');\r\n    }\r\n    const [lang, setLang] = useLocalStorage<string>('lang', defaultLocal);\r\n    const [locales, setLocales] = useLocalStorage<Locales>('locales');\r\n\r\n    useEffect(() => {\r\n        // load lang\r\n        let currentLang = lang;\r\n        if (!lang) {\r\n            const { navigator } = window;\r\n            if (navigator) {\r\n                const { language, languages } = navigator;\r\n                currentLang =\r\n                    language || (languages && languages.length && languages[0]) || defaultLocal;\r\n            }\r\n            setLang(currentLang);\r\n            return;\r\n        }\r\n\r\n        // load locales\r\n        if (\r\n            !locales ||\r\n            !locales.date ||\r\n            !locales.lang ||\r\n            locales.lang !== currentLang ||\r\n            Date.now() - locales.date > 86400000\r\n        ) {\r\n            console.log(currentLang);\r\n            console.log(i18n);\r\n            setLocales({ data: i18n.get(currentLang) || {}, lang: currentLang, date: Date.now() });\r\n        }\r\n    });\r\n\r\n    const getMessages = () => locales.data;\r\n\r\n    const setNewLang = (newLang: string) => {\r\n        setLang(newLang);\r\n        setLocales({ data: i18n.get(newLang) || {}, lang: newLang, date: Date.now() });\r\n    };\r\n\r\n    if (!locales) return <div>loadingâ€¦</div>;\r\n    return (\r\n        <Context.Provider\r\n            value={{\r\n                lang,\r\n                locales,\r\n                getMessages,\r\n                setNewLang,\r\n            }}\r\n        >\r\n            {children}\r\n        </Context.Provider>\r\n    );\r\n};\r\n\r\nexport const useI18n = () => {\r\n    const { getMessages, lang, setNewLang } = useContext(Context);\r\n    return { message: getMessages(), lang, setLang: setNewLang };\r\n};\r\n","D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\pages\\Files.tsx",["46","47"],"import * as React from 'react';\r\nimport {useState,useEffect}  from 'react'\r\nimport { useRouter } from '../hooks'\r\nimport * as FileIcons from '../img/filetypes';\r\nimport { IBreadcrumbProps,Card, Elevation, Breadcrumbs, Boundary, Spinner, Intent, Alert } from \"@blueprintjs/core\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { getFiles} from '../api'\r\nimport { FileInfo, FileType } from '../types'\r\nimport {useI18n} from '../hooks'\r\ninterface FileParms {\r\n    baseId: string,\r\n    id: string\r\n}\r\ninterface FileTableProps {\r\n    loading: boolean,\r\n    children: Array<FileInfo>\r\n}\r\ninterface FileSizeProps {\r\n    size: number\r\n}\r\nfunction FilesTable(props: FileTableProps) {\r\n    const router = useRouter();\r\n    function fileItemClicked(item: FileInfo) {\r\n        if (item.type === FileType.Directory) {\r\n            router.push(`/files/${item.baseId}/${item.id}`);\r\n        } else {\r\n\r\n        }\r\n    }\r\n    if (props.loading) {\r\n        return <Spinner intent={Intent.NONE} size={Spinner.SIZE_STANDARD} />\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                {props.children.map((file: FileInfo) =>\r\n                    <Card interactive={true} elevation={Elevation.TWO} key={file.id}>\r\n                        <div className=\"grid\" onClick={() => fileItemClicked(file)}>\r\n                            <div className=\"grid-cell u3\">\r\n                                {renderFileImage(file.ext, file.type === FileType.Directory)}\r\n                            </div>\r\n                            <div className=\"grid-cell u17\">\r\n                                <span className=\"filename\">{file.name}</span>\r\n                            </div>\r\n                            <div className=\"grid-cell u4\">\r\n                                <FileSize size={file.size} />\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nfunction FileSize({ size }: FileSizeProps) {\r\n    if (size > 0) {\r\n        const sizeName = [\"b\", \"KB\", \"MB\", \"GB\", \"TB\"];\r\n        let num = 0;\r\n        while (size > 1024 && num < 5) {\r\n            size = size / 1024;\r\n            num++;\r\n        }\r\n        if (num < 1) {\r\n            num = 1;\r\n            size = 1;\r\n        }\r\n        return <span className=\"filesize\">{Math.round(size * 100) / 100 + \" \" + sizeName[num]}</span>;\r\n    } else {\r\n        return <span className=\"filesize\"></span>;\r\n    }\r\n}\r\nfunction renderFileImage(type: string, isDirectory: boolean) {\r\n    let icon = FileIcons.file;\r\n    if (isDirectory) {\r\n        icon = FileIcons.folder;\r\n    } else {\r\n        if (type === 'mp4') {\r\n            icon = FileIcons.mp4;\r\n        } else if (type === 'avi') {\r\n            icon = FileIcons.avi;\r\n        } else if (type === 'exe') {\r\n            icon = FileIcons.exe;\r\n        } else if (type === 'png' || type === 'jpg' || type === 'svg') {\r\n            icon = FileIcons.jpg;\r\n        } else if (type === 'html' || type === 'htm') {\r\n            icon = FileIcons.html\r\n        } else if (type === 'pdf') {\r\n            icon = FileIcons.pdf\r\n        } else if (type === 'doc' || type === 'docx') {\r\n            icon = FileIcons.doc\r\n        } else if (type === 'ppt' || type === 'pptx') {\r\n            icon = FileIcons.ppt\r\n        } else if (type === 'xls' || type === 'xlsx') {\r\n            icon = FileIcons.xls\r\n        } else if (type === 'mp3') {\r\n            icon = FileIcons.mp3\r\n        } else if (type === 'json') {\r\n            icon = FileIcons.json\r\n        } else if (type === 'txt') {\r\n            icon = FileIcons.txt\r\n        } else if (type === 'zip' || type === 'gz' || type === 'rar' || type === 'tar') {\r\n            icon = FileIcons.zip\r\n        }\r\n    }\r\n    return <img src={icon} className=\"fileicon\" />\r\n}\r\n\r\nexport default function Files() {\r\n    const parm = useParams<FileParms>();\r\n    const [error, setError] = useState({ error: false, errorMessage: '' })\r\n    const [breadItems, setBreadItems] = useState<Array<IBreadcrumbProps>>([])\r\n    const [data, setData] = useState<FileTableProps>({\r\n        loading: false,\r\n        children: []\r\n    })\r\n    const {message} = useI18n();\r\n    async function fetchFiles() {\r\n        try{\r\n            let res = await getFiles(parm.baseId, parm.id);\r\n            setData({\r\n                loading: false,\r\n                children: res.children\r\n            })\r\n            setError({\r\n                error: false,\r\n                errorMessage: ''\r\n            })\r\n            setBreadItems([{ icon: \"folder-open\", text: res.cwd.name, current: true }])\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n                console.log(typeof err)\r\n                setError({\r\n                    error: true,\r\n                    errorMessage: err\r\n                })\r\n                setData({\r\n                    loading: false,\r\n                    children: []\r\n                })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setData((d) => {\r\n            return {\r\n                loading: false,\r\n                children: d.children\r\n            }\r\n        });\r\n        fetchFiles();      \r\n    }, [parm.baseId, parm.id])\r\n    console.log(message)\r\n    return (\r\n        <React.Fragment>\r\n            <Alert\r\n                confirmButtonText={message[\"ok\"]}\r\n                isOpen={error.error}\r\n                onClose={() => setError({ error: false, errorMessage: '' })}\r\n            >\r\n                <p>\r\n                    {error.errorMessage}\r\n                </p>\r\n            </Alert>\r\n            <Card elevation={0} style={{ width: `100%` }}>\r\n                <Breadcrumbs\r\n                    collapseFrom={Boundary.START}\r\n                    items={breadItems}\r\n                />\r\n            </Card>\r\n            <FilesTable {...data} />\r\n        </React.Fragment>\r\n    );\r\n}",["48","49"],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\components\\Navigation.tsx",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\types.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\index.tsx",["50"],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\index.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\i18n\\zh-CN.ts",[],"D:\\codes\\NCloud\\Src\\NCloud.React\\react-app\\src\\hooks\\rootSetting.tsx",["51"],{"ruleId":"52","severity":1,"message":"53","line":21,"column":14,"nodeType":"54","messageId":"55","endLine":21,"endColumn":27},{"ruleId":"56","severity":1,"message":"57","line":104,"column":12,"nodeType":"58","endLine":104,"endColumn":51},{"ruleId":"59","severity":1,"message":"60","line":150,"column":8,"nodeType":"61","endLine":150,"endColumn":30,"suggestions":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":13,"column":14,"nodeType":"54","messageId":"69","endLine":13,"endColumn":19},{"ruleId":"67","severity":1,"message":"70","line":1,"column":10,"nodeType":"54","messageId":"69","endLine":1,"endColumn":18},"@typescript-eslint/no-redeclare","'TransProvider' is already defined.","Identifier","redeclared","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchFiles'. Either include it or remove the dependency array.","ArrayExpression",["71"],"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'Index' is defined but never used.","unusedVar","'Children' is defined but never used.",{"desc":"74","fix":"75"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [fetchFiles, parm.baseId, parm.id]",{"range":"76","text":"77"},[5185,5207],"[fetchFiles, parm.baseId, parm.id]"]